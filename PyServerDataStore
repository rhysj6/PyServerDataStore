
import pickle
import time
import pygsheets
import os




gc = pygsheets.authorize() # This will create a link to authorize 
oldval = ""
running = True
count = 0
# 1. Open spreadsheet by name 
sh = gc.open('PyServerDataStore') # open spreadsheet
if os.path.exists("dataStore.pkl"):
    file = open("dataStore.pkl","rb")
    data = pickle.load(file)
    file.close
else:
    data = {"coins":"994","credits":"923","updateTime":"100"} #sample data value will later be changed to pickle file
    file = open("dataStore.pkl","wb")
    pickle.dump(data, file)
    file.close()

wk1 = sh.sheet1
timeOfMostRecentCommand = 0


def Encode(string, key, testTime = False):
    startTime = time.time()
    listOutput = []
    for i in string:
        x = ord(i)
        x = x**key
        listOutput.insert(len(listOutput),x)
    endTime = time.time()
    if testTime == True:
        print("took ", str(endTime-startTime)," seconds")
    return listOutput


def Decode(EncodedList, key, testTime = False):
    startTime = time.time()
    StrOutput = ""
    #print(EncodedList)
    EncodedList = EncodedList.replace("[","")
    EncodedList = EncodedList.replace("]","")
    Elist = EncodedList.split(",")

    for i in Elist:
        
        x = int(i)
        x = x**(1/key)
        c = chr(int(x))
        StrOutput = StrOutput + c
    endTime = time.time()
    if testTime == True:
        print("took ", str(endTime-startTime)," seconds")
    return StrOutput

while running == True:
    Encoded = False
    count = count + 1
    valOG = wk1.get_value('A1')
    if valOG != oldval:
        oldval = valOG
        val = valOG.split("@")
        if val[0] == "E":
            print("E")
            ComID = val[1]
            Com = eval(val[2])
            #print(Com)
            valOG = Decode(Com, int(ComID))
            Encoded = True
            val = valOG.split('@')
        if val[0] == "q":
            timeOfMostRecentCommand = time.time()
            print(valOG)
            CommandId = val[1]
            command = val[2]
            try:
                par = val[3]
            except:
                par = ""
            if command == "get":
                try:
                    resVal = data[par]
                    response = "r@" +CommandId+"@"+command+"@"+par+"@"+str(resVal)
                except:
                    response = "r@" + CommandId+"@"+command+"@"+par+"@"+"nil"

            elif command == "set":
                SetVal = val[4]
                data[par] = SetVal
                response = "r@" + CommandId+"@"+command+"@"+par+"@"+SetVal
            
            elif command == "save":
                count = 20
                response = "r@" + CommandId+"@"+command

            elif command == "exit":
                running = False
                response = "r@" + CommandId+"@"+command

            elif command == "exitAuto":
                running = False
                autoRunning = False
                response = "r@" + CommandId+"@"+command
            
            if Encoded == False:
                finalResponse = response
            else:
                finalResponse = "E@" + CommandId + "@" + str(Encode(response, int(CommandId)))



            wk1.update_value('A1',finalResponse)
            #print(response)
            time.sleep(0.5)
            if count >= 20:
                count = 0
                file = open("dataStore.pkl","wb")
                pickle.dump(data, file)
                file.close()
    else:
        timeSinceMostRecentCommand = time.time() - timeOfMostRecentCommand
        if timeSinceMostRecentCommand > int(data["updateTime"]):
            running = False
                
                
